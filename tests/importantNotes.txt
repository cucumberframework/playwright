
1. For traces we have to navigate to https://traces.playwright.dev then we need to paste the trace.zip folder to view the traces 

trace: 'retain-on-failure' this will generate traces only for failed test scripts

//special locators in playwright
//bacically used on checkbox or radio button page.
page.getByLabel('we need to pass the label text to identify the object');
page.getByPlaceHolder("password")



// to see and run tests from UI test runner 
npx playwright test --ui 

//run test with another config.js file 
npx playwright test --config=other.conf.js

---------------------------------------------------------------------------------------------------
//selecting elements from fropdown
await page.locators("#country").selectOption({label: 'India'})  //select element with visible text 
await page.locators("#country").selectOption("India");   //same as above i.e selecting element with visible text
await page.locator("#country").selectOption({value: 'value present in value tag' }) // selecting element from value tag
await page.locator("#country").selectOption({index: 1});

await pageFrame.locator("select[inputid='title'] option").nth(1).click(); // this statergy we used with smartoffice application as other starergies were NOT working 

---------------------------------------------------------------------------------------------------
//check if element is visible or not 

---------------------------------------------------------------------------------------------------
npx playwright test tests/moreValidations.spec.js --headed --debug  // This will execute test in headed and in debug mode 
npx playwright test tests/moreValidations.spec.js --ui  //this will run tests in playwright debug cansole
---------------------------------------------------------------------------------------------------
//If there are multiple element with same locator out of which few are hidden and few are visible 
and we want to locate only the elements which are in visable then we have to use ":visible" 
tag along with the locator as below 

await pageFrame.locator("a[href='consulting']:visible").click();

---------------------------------------------------------------------------------------------------

// taking data from JSON file into test script 
//json-->String-->JavaScriptObject
const dataSet=JSON.parse(JSON.stringify(require('../utils/smartOfficeTestData.json')));
---------------------------------------------------------------------------------------------------
//paramererizing test data for multiple set of data 
for(const data of dataSet){
    test{
    }
}
---------------------------------------------------------------------------------------------------
//Opening browser and maximize the window size, add below in configuration file 
 viewport:{width:720,height:720},

---------------------------------------------------------------------------------------------------
//this is used to run our tests with specific browser and with particular configuration which is mentioned in palywright.conf.js file 
npx playwright test tests/UIBasics2_2_PageObject.spec.js --project=safari

---------------------------------------------------------------------------------------------------
//retry mechanism in playwright
  retries: process.env.CI ? 2 : 3, //we can set retry mechanism on local and on gitHub actions 
---------------------------------------------------------------------------------------------------
//Run test scripts based on the tags 
test(`@regression First playwright test execution for ${data.officename}`, async ({page})=>

npx playwright test --grep @regression --project=chrome
//--grep @regression(Tag name) will be executed 
---------------------------------------------------------------------------------------------------
//Generating Allure reports 
npm i -D @playwright/test allure-playwright //installing allure in system 

npx playwright test --grep @regresion --project=chrome --reporter=line,allure-playwright   //this will run the suite wuth the tags and hte generate allure-results filder which will be used later

allure generate ./allure-results --clean  //this will generate teh allure report after execution of hte suite 

allure open ./allure-report  //this will be used to open the report 

---------------------------------------------------------------------------------------------------
//Im  package.json file we need to add the scripts which we need to run like suites we can create 
//to execute this "npm run alluicases"
"scripts": {
    "alluicases":"npx playwright test --ui",
    "allheadlesscases":"npx playwright test --ui",
    "allsafariexecution":"npx playwright test --project=safari",
    "allregression":"npx playwright test --project=chrome --grep @regression",
    "allsmoke":"npx playwright test --project=chrome --grep @smoke"
    },
    ---------------------------------------------------------------------------------------------------


